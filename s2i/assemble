#!/bin/bash
set -e

echo
echo "===> Build started at $(date)"
echo
START=$SECONDS

# Unconditionally print elapsed build time at exit
function finish {
  echo "===> Elapsed time: $(($SECONDS - $START)) seconds"
}
trap finish EXIT

echo "---> Preparing source..."
mkdir -p $SOURCE

cp -Rf /tmp/src/. $SOURCE

cd $SOURCE

pwd

# echo "---> Downloading dependencies..."
#go get -v ./...

GO111MODULE=${GO111MODULE:-on}
CGO_ENABLED=${CGO_ENABLED:-0}
GOOS=${GOOS:-linux}

BUILDOPTION_default="-v -a -installsuffix cgo "
BUILDOPTION=${BUILDOPTION:-$BUILDOPTION_default}

echo "** GO build options **"
echo "============================================="
echo "|| GO111MODULE: $GO111MODULE"
echo "|| CGO_ENABLED: $CGO_ENABLED"
echo "|| GOOS: $GOOS"
echo "|| BUILDOPTION: $BUILDOPTION"
echo "============================================="

if [ ! -f "go.mod" ]; then
echo "---> No go Mod found we Enable GOMOD"
export GO111MODULE=on
go mod init .
fi

if [  -f "go.sum" ]; then
echo "--> find go.sum file enable gomod..."
export GO111MODULE=on
fi

echo "---> Building application source..."
#go build -v -o main
#go install main

go build ${BUILDOPTION} -o main main.go
  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from $BUILDOPTION"
    exit $ERR
  fi
echo "---> Building finish"

echo "install binary"
go install main

echo
echo "---> upx compress "
upx -qq main
echo "---> upx verify "
upx -t main
#upx --ultra-brute -qq main && \

echo
pwd
chmod +x main
du -hs main

echo
echo "===> Build completed at $(date)"

# Fix source directory permissions
fix-permissions ./
